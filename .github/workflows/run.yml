name: Deploy Docker Container

on:
  workflow_dispatch:
    inputs:
      image_uri:
        description: '배포할 Docker 이미지 URI를 직접 지정합니다. (예: ***-docker.pkg.dev/***/***/server:latest)'
        required: true
        type: string

env:
  APP_PORT_HOST: 8765
  CONTAINER_NAME: server

jobs:
  deploy: # job 이름을 build-and-deploy에서 deploy로 변경 (더 명확하게)
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          command_timeout: 30m
          host: ${{ secrets.VM_SSH_HOST }}
          username: ${{ secrets.VM_SSH_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          port: 22
          script: |
            echo "Stopping and removing existing container (if any)..."
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true
            
            echo "Running new Docker container..."
            sudo docker run -d --add-host="localhost:host-gateway" --name ${{ env.CONTAINER_NAME }} -p ${{ env.APP_PORT_HOST }}:${{ env.APP_PORT_HOST }} --restart always -e MONGO_URI="${{ secrets.MONGO_URI }}" -e DB_NAME="${{ secrets.DB_NAME }}" -e JWT_SECRET="${{ secrets.JWT_SECRET }}" -e GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" -e GEMINI_MODEL="${{ vars.GEMINI_MODEL }}" -e BUCKET="${{ secrets.BUCKET }}" -e GCP_SA_KEY="${{ secrets.GCP_SA_KEY }}" -e GCP_PROJECT_ID="${{ secrets.GCP_PROJECT_ID }}" -e VC_HOST="${{ secrets.VM_SSH_HOST }}" "${{ github.event.inputs.image_uri }}"
